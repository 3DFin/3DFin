[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "3DFIN"
description = "Automatic dendrometry and forest inventory for terrestrial point clouds, application package"
readme = "README.md"
requires-python = ">=3.8"
license = "GPL-3.0-or-later"
keywords = ["lidar", "forestry", "tls"]
authors = [
  { name = "Carlos Cabo", email = "carloscabo@uniovi.es" },
  { name = "Diego Laino", email = "diegolainor@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: GIS",
  "Intended Audience :: Science/Research",
]
dependencies = [
  "laspy",
  "lazrs",
  "numpy",
  "pandas",
  "XlsxWriter",
  "Pillow",
  "dendromatics @ git+https://github.com/3DFIN/dendromatics@temp_csf_reference"
]
dynamic = ["version"]

[tool.hatch.version]
path = "src/three_d_fin/__about__.py"

[project.urls]
Documentation = "https://github.com/3DFIN/3DFIN#README.md"
Issues = "https://github.com/3DFIN/3DFIN/issues"
Source = "https://github.com/3DFIN/3DFIN"

[project.scripts]
3DFin = "three_d_fin.processing:launch_application"

[tool.hatch.build.targets.wheel]
packages = ["src/three_d_fin"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
dependencies = [
  "pytest",
  "pytest-cov",
]

[tool.hatch.envs.default.scripts]
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/three_d_fin/processing --cov=tests {args}"
no-cov = "cov --no-cov {args}"

[[tool.hatch.envs.test.matrix]]
python = ["38", "39", "310", "311"]

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "src/three_d_fin/__about__.py",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.hatch.envs.pyinstaller]
dependencies = [
  "pyinstaller"
]

# hatch run pyinstaller:build
[tool.hatch.envs.pyinstaller.scripts]
build = "pyinstaller generate_exe/options.spec"

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "ruff>=0.0.261",
  "black>=23.3.0",
  "mypy>=1.2.0"
]
[tool.hatch.envs.lint.scripts]
# static analysis with ruff
check-type = "mypy --strict {args:./src/three_d_fin/processing/configuration.py}"
check-static = "ruff check {args:.}"
check-format = "black --check --diff --color {args:.}"
fix-static = "ruff --fix {args:.}"
fix-format = "black {args:.}"
check-all = ["check-static", "check-format"]
fix-all = [
  "fix-static",
  "fix-format",
  "check-all",
]

[tool.ruff]
select = ["E", "W", "YTT", "PTH", "NPY", "RET", "PYI", "Q", "F", "B", "I", "D"]
target-version = "py310"
line-length = 88
# TODO: for now we ignore "Line too long error (E501)" 
# because our comments are too longs
# Black will take care of the line lenght in code anyway
ignore = ["E501", 
# Ignore docstring in public package and module
  "D100", "D104",
# Blank line before class
  "D203",
# multiline summary second line
  "D213"
]

[tool.black]
line-length = 88
target-version = ["py310"]