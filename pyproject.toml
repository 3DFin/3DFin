[build-system]
requires = ["hatchling", "pyqt5~=5.15"]
build-backend = "hatchling.build"

[project]
name = "3DFin"
description = "Automatic dendrometry and forest inventory for terrestrial point clouds, application package"
readme = "README.md"
requires-python = ">=3.9"
license = "GPL-3.0-or-later"
keywords = ["lidar", "forestry", "tls"]
authors = [
  { name = "Carlos Cabo", email = "carloscabo@uniovi.es" },
  { name = "Diego Laino", email = "diegolainor@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: GIS",
  "Intended Audience :: Science/Research",
]
dependencies = [
  "lazrs~=0.6.0",
  "pandas~=2.2.0",
  "XlsxWriter~=3.2.0",
  "dendromatics~=0.5.0a0",
  "pydantic~=1.10.15",
  "pyqt5~=5.15"
]
dynamic = ["version"]

# Entry point for CloudCompare plugin
[project.entry-points."cloudcompare.plugins"]
3DFin = "three_d_fin.cloudcompare.plugin:ThreeDFinCC"

# Entry point for GUI and CLI
[project.scripts]
3DFin = "three_d_fin.processing:launch_application"

[tool.hatch.version]
path = "src/three_d_fin/__about__.py"

[project.urls]
Documentation = "https://github.com/3DFin/3DFin#README.md"
Issues = "https://github.com/3DFin/3DFin/issues"
Source = "https://github.com/3DFin/3DFin"

[tool.hatch.build.targets.wheel]
packages = ["src/three_d_fin"]

[tool.hatch.build.targets.sdist]
exclude = ["pyinstaller", "scripts", "qt-files", ".github"]

[tool.hatch.envs.default]
dependencies = ["pytest", "pytest-cov"]

[tool.hatch.envs.default.scripts]
# test
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/three_d_fin/processing --cov=tests {args}"
no-cov = "cov --no-cov {args}"
# qt
qt-moc = [
  "pyuic5 {args} qt-files/src/main_window.ui -o src/three_d_fin/gui/main_window.py --import-from=three_d_fin.gui --resource-suffix=", 
  "pyuic5 {args} qt-files/src/expert_dlg.ui -o src/three_d_fin/gui/expert_dlg.py --import-from=three_d_fin.gui --resource-suffix="
]
qt-ressource = "pyrcc5 {args} qt-files/src/gui_ressources.qrc -o src/three_d_fin/gui/gui_ressources.py"
qt-all = ["qt-moc", "qt-ressource"]

[tool.hatch.build.targets.sdist.hooks.custom]
path = "scripts/qt_build_hook.py"
src_folder = "qt-files/src"
dest_folder = "src/three_d_fin/gui"
import_from = "three_d_fin.gui" # TODO: it could be infered from dest_folder

# PyInstaller builder
[tool.hatch.build.targets.custom]
require-runtime-dependencies = true
dependencies = ["pyinstaller"]
path = "scripts/pyinstaller_builder.py"

# We need to duplicate this for pyinstaller custom target
# it is not very DRY. The best would be to depends on sdist target
[tool.hatch.build.targets.custom.hooks.custom] 
path = "scripts/qt_build_hook.py"
src_folder = "qt-files/src"
dest_folder = "src/three_d_fin/gui"
import_from = "three_d_fin.gui" # TODO: it could be infered from dest_folder

[[tool.hatch.envs.test.matrix]]
python = ["39", "310", "311", "312"]

[tool.coverage.run]
branch = true
parallel = true
omit = ["src/three_d_fin/__about__.py"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["mypy>=1.2.0"]

[tool.hatch.envs.lint.scripts]
# static analysis with ruff
check-type = "mypy --install-types --non-interactive {args:src/three_d_fin tests}"
check-static = "hatch fmt -l --check"
check-format = "hatch fmt -f --check"
fix-static = "hatch fmt -l"
fix-format = "hatch fmt -f"
check-all = ["check-static", "check-format"]
fix-all = ["fix-static", "fix-format", "check-all"]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = ["I001","E", "W", "YTT", "PTH", "NPY", "RET", "PYI", "Q", "F", "B", "I", "D"]
# TODO: for now we ignore "Line too long error (E501)" 
# because our comments are too longs
# code formatting will take care of the line length in code anyway
ignore = [
  "E501",
  # Ignore docstring in public package and module
  "D100",
  "D104",
  # Blank line before class
  "D203",
  # multiline summary second line
  "D213",
]

[tool.ruff.lint.isort]
known-first-party = ["three_d_fin"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
